from mininet.log import info
import random
import time
import io

def generate_mice_hping(t, net):
    """
    Gera um mice flows usando hping
    """
    hosts = net.stations
    end_points = random.sample(hosts, 2)
    src = net.get(str(end_points[0]))
    dst = net.get(str(end_points[1]))
    data_size = random.randint(20, 500)
    port = random.randint(1025, 65536)
    # Tempo entre 500 e 1000 ms
    tempo = random.choice([500,625,714,833,1000])
    # Count:
    count = int(t*(tempo/1000))
    client_cmd = f"hping3 {dst.IP()} -d {data_size} -c {count} -q -p {port} -i {tempo} --dontfrag &"
    src.cmdPrint(client_cmd)

    
def generate_flood_hping(t, net):
    """
    Gera um flod flows usando hping
    """
    hosts = net.stations
    end_points = random.sample(hosts, 2)
    src = net.get(str(end_points[0]))
    dst = net.get(str(end_points[1]))
    data_size = random.randint(500, 1400)
    port = random.randint(1025, 65536)
    client_cmd = f"hping3 {dst.IP()} -d {data_size} -c {t*8} --fast -q -p {port} --dontfrag &"
    src.cmdPrint(client_cmd)


def log_generate_flows(arqv, txt):
    print(txt)
    arqv.write(str(txt)+'\n')


def generate_flows(n_elephant_flows, n_mice_flows, duration, net):
    """
    Gera todos os fluxos.
    """

    arqv = io.open('log_flows.txt','w')

    n_total_flows = n_elephant_flows + n_mice_flows
    interval = duration // n_total_flows

    # setting random mice flow or elephant flows
    flow_type = []
    for i in range(n_elephant_flows):
        flow_type.append('E')
    for i in range(n_mice_flows):
        flow_type.append('M')
    random.shuffle(flow_type)

    print("Setting uniform flow start times")
    flow_start_time = []
    for i in range(n_total_flows):
        flow_start_time.append(i * interval)

    print("Setting uniform flow end times")
    flow_end_time = []
    for i in range(n_total_flows):
        flow_end_time.append((i + 1) * interval)

    print("calculating flow duration")
    flow_duration = []
    for i in range(n_total_flows):
        flow_duration.append(flow_end_time[i] - flow_start_time[i])

    log_generate_flows(arqv, flow_type)
    log_generate_flows(arqv, flow_start_time)
    log_generate_flows(arqv, flow_end_time)
    log_generate_flows(arqv, flow_duration)
    log_generate_flows(arqv, ("Remaining duration :" + str(duration - flow_end_time[-1])))

    # generating the flows
    tempos = []
    tempo_inicial = time.time()
    for i in range(n_total_flows):
        if i == 0:
            time.sleep(flow_start_time[i])
        else:
            time.sleep(flow_start_time[i] - flow_start_time[i-1])
        if flow_type[i] == 'E':
            tempos.append(time.time()-tempo_inicial)
            for _ in range(random.randint(2, 8)):
                generate_mice_hping(flow_duration[i], net)
            generate_flood_hping(flow_duration[i], net)
        elif flow_type[i] == 'M':
            for _ in range(random.randint(2, 8)):
                generate_mice_hping(flow_duration[i], net)
            
    log_generate_flows(arqv, "ELEPHANT FLOWS START TIME:")
    log_generate_flows(arqv, tempos)

    # sleeping for the remaining duration of the experiment
    remaining_duration = duration - flow_start_time[-1]
    info("Traffic started, going to sleep for %s seconds...\n " % remaining_duration)
    time.sleep(remaining_duration)

    # ending all the flows generated by
    info("Stopping traffic...\n")

    arqv.close()
